version: "3"

vars:
  PWD:
    sh: pwd
  TERM:
    sh: echo $TERM
  VERSION:
    sh: echo ${VERSION:-develop}
  UNSETENV: |
    # unset all env vars
    for i in $(env | awk -F"=" '{print $1}') ; do unset $i ; done
  PROJECT_DIR: "{{.PWD}}"
  BUILD_DIR: "{{.PROJECT_DIR}}/build"
  TOOLS_DIR: "{{.BUILD_DIR}}/tools"
  TOOLS_PREFIX: "{{.TOOLS_DIR}}/chroot"
  TOOLS_SOURCES_DIR: "{{.TOOLS_DIR}}/sources"
  PATH: /bin:/usr/bin:{{.TOOLS_PREFIX}}/bin

tasks:
  default:
    run: once
    deps:
      - build-macos
      - build-ios

  build-macos:
    run: once
    platforms:
      - darwin
    deps:
      - build-macos-audio
      - build-macos-video

  build-macos-audio:
    run: once
    platforms:
      - darwin
    deps:
      - tool-versions-lock
      - task: archives-macos-universal
        vars:
          VARIANT: audio
      - task: archives-macos-amd64
        vars:
          VARIANT: audio
      - task: archives-macos-arm64
        vars:
          VARIANT: audio

  build-macos-video:
    run: once
    platforms:
      - darwin
    deps:
      - tool-versions-lock
      - task: archives-macos-universal
        vars:
          VARIANT: video
      - task: archives-macos-amd64
        vars:
          VARIANT: video
      - task: archives-macos-arm64
        vars:
          VARIANT: video

  build-ios:
    run: once
    platforms:
      - darwin
    deps:
      - build-ios-audio
      - build-ios-video

  build-ios-audio:
    run: once
    platforms:
      - darwin
    deps:
      - tool-versions-lock
      - task: archives-ios-universal
        vars:
          VARIANT: audio
      - task: archives-ios-arm64
        vars:
          VARIANT: audio

  build-ios-video:
    run: once
    platforms:
      - darwin
    deps:
      - tool-versions-lock
      - task: archives-ios-universal
        vars:
          VARIANT: video
      - task: archives-ios-arm64
        vars:
          VARIANT: video

  tool-versions-lock:
    internal: true
    run: once
    cmds:
      - |
        set -e

        CONTENT=$(go run cmd/tool-versions/main.go)
        echo "$CONTENT" > "{{.BUILD_DIR}}"/tool-versions.lock

  archives-macos-universal:
    internal: true
    run: when_changed
    vars:
      OS: macos
      ARCH: universal
      TARGET_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/{{.OS}}"
    deps:
      - task: libs-macos-universal
        vars:
          VARIANT: "{{.VARIANT}}"
      - task: xcframeworks-macos-universal
        vars:
          VARIANT: "{{.VARIANT}}"
    cmds:
      - task: archives-libs
        vars:
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          TARGET_DIR: "{{.TARGET_DIR}}"
          VARIANT: "{{.VARIANT}}"
      - task: archives-xcframeworks
        vars:
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          TARGET_DIR: "{{.TARGET_DIR}}"
          VARIANT: "{{.VARIANT}}"

  archives-macos-amd64:
    internal: true
    run: when_changed
    vars:
      OS: macos
      ARCH: amd64
      TARGET_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/{{.OS}}"
    deps:
      - task: libs-macos-amd64
        vars:
          VARIANT: "{{.VARIANT}}"
    cmds:
      - task: archives-libs
        vars:
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          TARGET_DIR: "{{.TARGET_DIR}}"
          VARIANT: "{{.VARIANT}}"

  archives-macos-arm64:
    internal: true
    run: when_changed
    vars:
      OS: macos
      ARCH: arm64
      TARGET_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/{{.OS}}"
    deps:
      - task: libs-macos-arm64
        vars:
          VARIANT: "{{.VARIANT}}"
    cmds:
      - task: archives-libs
        vars:
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          TARGET_DIR: "{{.TARGET_DIR}}"
          VARIANT: "{{.VARIANT}}"

  archives-ios-universal:
    internal: true
    run: when_changed
    vars:
      OS: ios
      ARCH: universal
      TARGET_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/{{.OS}}"
    deps:
      - task: xcframeworks-ios-universal
        vars:
          VARIANT: "{{.VARIANT}}"
    cmds:
      - task: archives-xcframeworks
        vars:
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          TARGET_DIR: "{{.TARGET_DIR}}"
          VARIANT: "{{.VARIANT}}"

  archives-ios-arm64:
    internal: true
    run: when_changed
    vars:
      OS: ios
      ARCH: arm64
      TARGET_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/{{.OS}}"
    deps:
      - task: libs-ios-arm64
        vars:
          VARIANT: "{{.VARIANT}}"
    cmds:
      - task: archives-libs
        vars:
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          TARGET_DIR: "{{.TARGET_DIR}}"
          VARIANT: "{{.VARIANT}}"

  archives-xcframeworks:
    label: archives-xcframeworks-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    vars:
      XCFRAMEWORKS_DIR: "{{.TARGET_DIR}}/{{.ARCH}}/xcframeworks"
      ARCHIVES_DIR: "{{.TARGET_DIR}}/{{.ARCH}}/archives/xcframeworks"
    sources:
      - "{{.XCFRAMEWORKS_DIR}}/*.xcframework/*"
    generates:
      - "{{.ARCHIVES_DIR}}/*.tar.gz"
    cmds:
      - rm -rf "{{.ARCHIVES_DIR}}"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}

        export OS={{.OS}}
        export ARCH={{.ARCH}}
        export VERSION={{.VERSION}}
        export VARIANT={{.VARIANT}}
        export TYPE=xcframeworks
        export FILES_DIR={{.XCFRAMEWORKS_DIR}}
        export ARCHIVES_DIR={{.ARCHIVES_DIR}}
        sh "{{.PROJECT_DIR}}/scripts/archives/build.sh"

  archives-libs:
    label: archives-libs-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    vars:
      LIBS_DIR: "{{.TARGET_DIR}}/{{.ARCH}}/libs"
      ARCHIVES_DIR: "{{.TARGET_DIR}}/{{.ARCH}}/archives/libs"
    sources:
      - "{{.LIBS_DIR}}/*.dylib"
    generates:
      - "{{.ARCHIVES_DIR}}/*.tar.gz"
    cmds:
      - rm -rf "{{.ARCHIVES_DIR}}"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}

        export OS={{.OS}}
        export ARCH={{.ARCH}}
        export VERSION={{.VERSION}}
        export VARIANT={{.VARIANT}}
        export TYPE=libs
        export FILES_DIR={{.LIBS_DIR}}
        export ARCHIVES_DIR={{.ARCHIVES_DIR}}
        sh "{{.PROJECT_DIR}}/scripts/archives/build.sh"

  xcframeworks-macos-universal:
    label: xcframeworks-{{.VARIANT}}-macos-universal
    internal: true
    run: when_changed
    vars:
      FRAMEWORKS_MACOS_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/macos/universal/frameworks"
      XCFRAMEWORKS_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/macos/universal/xcframeworks"
    deps:
      - task: frameworks-macos-universal
        vars:
          VARIANT: "{{.VARIANT}}"
    sources:
      - "{{.FRAMEWORKS_MACOS_DIR}}/*.framework/*"
    generates:
      - "{{.XCFRAMEWORKS_DIR}}/*.xcframework/*"
    cmds:
      - rm -rf "{{.XCFRAMEWORKS_DIR}}"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}

        export FRAMEWORKS_MACOS_DIR={{.FRAMEWORKS_MACOS_DIR}}
        export XCFRAMEWORKS_DIR={{.XCFRAMEWORKS_DIR}}
        sh "{{.PROJECT_DIR}}/scripts/xcframeworks/macos/create_xcframeworks.sh"

  xcframeworks-ios-universal:
    label: xcframeworks-{{.VARIANT}}-ios-universal
    internal: true
    run: when_changed
    vars:
      FRAMEWORKS_IOS_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/ios/arm64/frameworks"
      FRAMEWORKS_IOSSIMULATOR_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/iossimulator/universal/frameworks"
      XCFRAMEWORKS_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/ios/universal/xcframeworks"
    deps:
      - task: frameworks-ios-arm64
        vars:
          VARIANT: "{{.VARIANT}}"
      - task: frameworks-iossimulator-universal
        vars:
          VARIANT: "{{.VARIANT}}"
    sources:
      - "{{.FRAMEWORKS_IOS_DIR}}/*.framework/*"
      - "{{.FRAMEWORKS_IOSSIMULATOR_DIR}}/*.framework/*"
    generates:
      - "{{.XCFRAMEWORKS_DIR}}/*.xcframework/*"
    cmds:
      - rm -rf "{{.XCFRAMEWORKS_DIR}}"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}

        export FRAMEWORKS_IOS_DIR={{.FRAMEWORKS_IOS_DIR}}
        export FRAMEWORKS_IOSSIMULATOR_DIR={{.FRAMEWORKS_IOSSIMULATOR_DIR}}
        export XCFRAMEWORKS_DIR={{.XCFRAMEWORKS_DIR}}
        sh "{{.PROJECT_DIR}}/scripts/xcframeworks/ios/create_xcframeworks.sh"

  frameworks-macos-universal:
    internal: true
    run: when_changed
    vars:
      OS: macos
      ARCH: universal
      TARGET_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/{{.OS}}"
    deps:
      - task: libs-macos-universal
        vars:
          VARIANT: "{{.VARIANT}}"
    cmds:
      - task: frameworks
        vars:
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          TARGET_DIR: "{{.TARGET_DIR}}"
          VARIANT: "{{.VARIANT}}"

  frameworks-ios-arm64:
    internal: true
    run: when_changed
    vars:
      OS: ios
      ARCH: arm64
      TARGET_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/{{.OS}}"
    deps:
      - task: libs-ios-arm64
        vars:
          VARIANT: "{{.VARIANT}}"
    cmds:
      - task: frameworks
        vars:
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          TARGET_DIR: "{{.TARGET_DIR}}"
          VARIANT: "{{.VARIANT}}"

  frameworks-iossimulator-universal:
    internal: true
    run: when_changed
    vars:
      OS: iossimulator
      ARCH: universal
      TARGET_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/{{.OS}}"
    deps:
      - task: libs-iossimulator-universal
        vars:
          VARIANT: "{{.VARIANT}}"
    cmds:
      - task: frameworks
        vars:
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          TARGET_DIR: "{{.TARGET_DIR}}"
          VARIANT: "{{.VARIANT}}"

  frameworks:
    label: frameworks-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    vars:
      LIBS_DIR: "{{.TARGET_DIR}}/{{.ARCH}}/libs"
      FRAMEWORKS_DIR: "{{.TARGET_DIR}}/{{.ARCH}}/frameworks"
    sources:
      - "{{.LIBS_DIR}}/*.dylib"
    generates:
      - "{{.FRAMEWORKS_DIR}}/*.framework/*"
    cmds:
      - rm -rf "{{.FRAMEWORKS_DIR}}"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}

        export OS={{.OS}}
        export PROJECT_DIR={{.PROJECT_DIR}}
        export LIBS_DIR={{.LIBS_DIR}}
        export FRAMEWORKS_DIR={{.FRAMEWORKS_DIR}}
        sh "{{.PROJECT_DIR}}/scripts/frameworks/build.sh"

  libs-macos-universal:
    label: libs-{{.VARIANT}}-{{.OS}}-universal
    internal: true
    run: when_changed
    vars:
      OS: macos
      TARGET_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/{{.OS}}"
      ARCH1: amd64
      ARCH2: arm64
      LIBS_ARCH1_DIR: "{{.TARGET_DIR}}/{{.ARCH1}}/libs"
      LIBS_ARCH2_DIR: "{{.TARGET_DIR}}/{{.ARCH2}}/libs"
      LIBS_UNIVERSAL_DIR: "{{.TARGET_DIR}}/universal/libs"
    deps:
      - task: libs-macos-amd64
        vars:
          VARIANT: "{{.VARIANT}}"
      - task: libs-macos-arm64
        vars:
          VARIANT: "{{.VARIANT}}"
    sources:
      - "{{.LIBS_ARCH1_DIR}}/*.dylib"
      - "{{.LIBS_ARCH2_DIR}}/*.dylib"
    generates:
      - "{{.LIBS_UNIVERSAL_DIR}}/*.dylib"
    cmds:
      - rm -rf "{{.LIBS_UNIVERSAL_DIR}}"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}

        export ARCH1={{.ARCH1}}
        export ARCH2={{.ARCH2}}
        export LIBS_ARCH1_DIR={{.LIBS_ARCH1_DIR}}
        export LIBS_UNIVERSAL_DIR={{.LIBS_UNIVERSAL_DIR}}
        sh "{{.PROJECT_DIR}}/scripts/libs/build-universal.sh"

  libs-macos-amd64:
    label: libs-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    vars:
      OS: macos
      ARCH: amd64
      TARGET_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/{{.OS}}"
    deps:
      - task: libs
        vars:
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          TARGET_DIR: "{{.TARGET_DIR}}"
          VARIANT: "{{.VARIANT}}"

  libs-macos-arm64:
    label: libs-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    vars:
      OS: macos
      ARCH: arm64
      TARGET_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/{{.OS}}"
    deps:
      - task: libs
        vars:
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          TARGET_DIR: "{{.TARGET_DIR}}"
          VARIANT: "{{.VARIANT}}"

  libs-ios-arm64:
    label: libs-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    vars:
      OS: ios
      ARCH: arm64
      TARGET_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/{{.OS}}"
    deps:
      - task: libs
        vars:
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          TARGET_DIR: "{{.TARGET_DIR}}"
          VARIANT: "{{.VARIANT}}"

  libs-iossimulator-universal:
    label: libs-{{.VARIANT}}-{{.OS}}-universal
    internal: true
    run: when_changed
    vars:
      OS: iossimulator
      TARGET_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/{{.OS}}"
      ARCH1: amd64
      ARCH2: arm64
      LIBS_ARCH1_DIR: "{{.TARGET_DIR}}/{{.ARCH1}}/libs"
      LIBS_ARCH2_DIR: "{{.TARGET_DIR}}/{{.ARCH2}}/libs"
      LIBS_UNIVERSAL_DIR: "{{.TARGET_DIR}}/universal/libs"
    deps:
      - task: libs-iossimulator-amd64
        vars:
          VARIANT: "{{.VARIANT}}"
      - task: libs-iossimulator-arm64
        vars:
          VARIANT: "{{.VARIANT}}"
    sources:
      - "{{.LIBS_ARCH1_DIR}}/*.dylib"
      - "{{.LIBS_ARCH2_DIR}}/*.dylib"
    generates:
      - "{{.LIBS_UNIVERSAL_DIR}}/*.dylib"
    cmds:
      - rm -rf "{{.LIBS_UNIVERSAL_DIR}}"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}

        export ARCH1={{.ARCH1}}
        export ARCH2={{.ARCH2}}
        export LIBS_ARCH1_DIR={{.LIBS_ARCH1_DIR}}
        export LIBS_UNIVERSAL_DIR={{.LIBS_UNIVERSAL_DIR}}
        sh "{{.PROJECT_DIR}}/scripts/libs/build-universal.sh"

  libs-iossimulator-amd64:
    label: libs-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    vars:
      OS: iossimulator
      ARCH: amd64
      TARGET_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/{{.OS}}"
    deps:
      - task: libs
        vars:
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          TARGET_DIR: "{{.TARGET_DIR}}"
          VARIANT: "{{.VARIANT}}"

  libs-iossimulator-arm64:
    label: libs-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    vars:
      OS: iossimulator
      ARCH: arm64
      TARGET_DIR: "{{.BUILD_DIR}}/{{.VARIANT}}/{{.OS}}"
    deps:
      - task: libs
        vars:
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          TARGET_DIR: "{{.TARGET_DIR}}"
          VARIANT: "{{.VARIANT}}"

  libs:
    label: libs-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    vars:
      LIBS_DIR: "{{.TARGET_DIR}}/{{.ARCH}}/libs"
      SOURCES_DIR: "{{.TARGET_DIR}}/{{.ARCH}}/sources"
      PREFIX: "{{.TARGET_DIR}}/{{.ARCH}}/chroot"
      PKG_CONFIG_PATH: "{{.PREFIX}}/lib/pkgconfig"
    deps:
      - task: mpv
        vars:
          SOURCES_DIR: "{{.SOURCES_DIR}}"
          PREFIX: "{{.PREFIX}}"
          PKG_CONFIG_PATH: "{{.PKG_CONFIG_PATH}}"
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          VARIANT: "{{.VARIANT}}"
    sources:
      - "{{.PREFIX}}/lib/*.dylib"
    generates:
      - "{{.LIBS_DIR}}/*.dylib"
    cmds:
      - rm -rf "{{.LIBS_DIR}}"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}

        export OS={{.OS}}
        export ARCH={{.ARCH}}
        export LIBS_DIR={{.LIBS_DIR}}
        export PREFIX={{.PREFIX}}
        export PROJECT_DIR={{.PROJECT_DIR}}
        sh "{{.PROJECT_DIR}}/scripts/libs/build.sh"

  downloads:
    run: once
    sources:
      - downloads.lock
    generates:
      - downloads/*.tar.*
    cmds:
      - |
        set -e

        rm -f downloads/.*.tmp
        rm -f downloads/*.tar.*
        go run cmd/downloads/main.go downloads.lock downloads

  extract:
    internal: true
    run: when_changed
    cmds:
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}

        export PKG_NAME={{.PKG_NAME}}
        export TARGET_DIR={{.TARGET_DIR}}
        sh "{{.PROJECT_DIR}}/scripts/extract/build.sh"

  links:
    internal: true
    run: when_changed
    vars:
      BINARIES: meson
        ninja
        cmake
    status:
      - |
        set -e

        export BINARIES="{{.BINARIES}}"
        export TOOLS_PREFIX={{.TOOLS_PREFIX}}
        sh "{{.PROJECT_DIR}}/scripts/links/status.sh"
    cmds:
      - |
        set -e

        export BINARIES="{{.BINARIES}}"
        export TOOLS_PREFIX={{.TOOLS_PREFIX}}
        sh "{{.PROJECT_DIR}}/scripts/links/build.sh"

  pkg-config:
    internal: true
    run: when_changed
    deps:
      - downloads
    sources:
      - downloads/pkg-config-*.tar.*
    generates:
      - "{{.TOOLS_PREFIX}}/bin/pkg-config"
    cmds:
      - rm -rf "{{.TOOLS_SOURCES_DIR}}/pkg-config"
      - task: extract
        vars:
          PKG_NAME: pkg-config
          TARGET_DIR: "{{.TOOLS_SOURCES_DIR}}/pkg-config"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}

        export OS=macos
        export ARCH={{ARCH}}
        export TOOLS_SOURCES_DIR={{.TOOLS_SOURCES_DIR}}
        export PROJECT_DIR={{.PROJECT_DIR}}
        export TOOLS_PREFIX={{.TOOLS_PREFIX}}
        sh "{{.PROJECT_DIR}}/scripts/pkg-config/build.sh"

  tools:
    internal: true
    run: once
    deps:
      - links
      - pkg-config

  freetype:
    label: freetype-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    deps:
      - tools
      - downloads
      - task: harfbuzz
        vars:
          SOURCES_DIR: "{{.SOURCES_DIR}}"
          PREFIX: "{{.PREFIX}}"
          PKG_CONFIG_PATH: "{{.PKG_CONFIG_PATH}}"
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          VARIANT: "{{.VARIANT}}"
    status:
      - "[ {{.VARIANT}} == audio ] || test -f '{{.PREFIX}}/lib/libfreetype.dylib'"
    cmds:
      - rm -rf "{{.SOURCES_DIR}}/freetype"
      - task: extract
        vars:
          PKG_NAME: freetype
          TARGET_DIR: "{{.SOURCES_DIR}}/freetype"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}
        export PKG_CONFIG_PATH={{.PKG_CONFIG_PATH}}

        export OS={{.OS}}
        export ARCH={{.ARCH}}
        export SOURCES_DIR={{.SOURCES_DIR}}
        export PROJECT_DIR={{.PROJECT_DIR}}
        export PREFIX={{.PREFIX}}
        sh "{{.PROJECT_DIR}}/scripts/freetype/build.sh"

  fribidi:
    label: fribidi-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    deps:
      - tools
      - downloads
    status:
      - "[ {{.VARIANT}} == audio ] || test -f '{{.PREFIX}}/lib/libfribidi.dylib'"
    cmds:
      - rm -rf "{{.SOURCES_DIR}}/fribidi"
      - task: extract
        vars:
          PKG_NAME: fribidi
          TARGET_DIR: "{{.SOURCES_DIR}}/fribidi"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}
        export PKG_CONFIG_PATH={{.PKG_CONFIG_PATH}}

        export OS={{.OS}}
        export ARCH={{.ARCH}}
        export SOURCES_DIR={{.SOURCES_DIR}}
        export PROJECT_DIR={{.PROJECT_DIR}}
        export PREFIX={{.PREFIX}}
        sh "{{.PROJECT_DIR}}/scripts/fribidi/build.sh"

  harfbuzz:
    label: harfbuzz-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    deps:
      - tools
      - downloads
    status:
      - "[ {{.VARIANT}} == audio ] || test -f '{{.PREFIX}}/lib/libharfbuzz.dylib'"
    cmds:
      - rm -rf "{{.SOURCES_DIR}}/harfbuzz"
      - task: extract
        vars:
          PKG_NAME: harfbuzz
          TARGET_DIR: "{{.SOURCES_DIR}}/harfbuzz"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}
        export PKG_CONFIG_PATH={{.PKG_CONFIG_PATH}}

        export OS={{.OS}}
        export ARCH={{.ARCH}}
        export SOURCES_DIR={{.SOURCES_DIR}}
        export PROJECT_DIR={{.PROJECT_DIR}}
        export PREFIX={{.PREFIX}}
        sh "{{.PROJECT_DIR}}/scripts/harfbuzz/build.sh"

  libass:
    label: libass-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    deps:
      - tools
      - downloads
      - task: freetype
        vars:
          SOURCES_DIR: "{{.SOURCES_DIR}}"
          PREFIX: "{{.PREFIX}}"
          PKG_CONFIG_PATH: "{{.PKG_CONFIG_PATH}}"
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          VARIANT: "{{.VARIANT}}"
      - task: fribidi
        vars:
          SOURCES_DIR: "{{.SOURCES_DIR}}"
          PREFIX: "{{.PREFIX}}"
          PKG_CONFIG_PATH: "{{.PKG_CONFIG_PATH}}"
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          VARIANT: "{{.VARIANT}}"
      - task: harfbuzz
        vars:
          SOURCES_DIR: "{{.SOURCES_DIR}}"
          PREFIX: "{{.PREFIX}}"
          PKG_CONFIG_PATH: "{{.PKG_CONFIG_PATH}}"
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          VARIANT: "{{.VARIANT}}"
    status:
      - "[ {{.VARIANT}} == audio ] || test -f '{{.PREFIX}}/lib/libass.dylib'"
    cmds:
      - rm -rf "{{.SOURCES_DIR}}/libass"
      - task: extract
        vars:
          PKG_NAME: libass
          TARGET_DIR: "{{.SOURCES_DIR}}/libass"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}
        export PKG_CONFIG_PATH={{.PKG_CONFIG_PATH}}

        export OS={{.OS}}
        export ARCH={{.ARCH}}
        export SOURCES_DIR={{.SOURCES_DIR}}
        export PROJECT_DIR={{.PROJECT_DIR}}
        export PREFIX={{.PREFIX}}
        sh "{{.PROJECT_DIR}}/scripts/libass/build.sh"

  libressl:
    label: libressl-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    deps:
      - tools
      - downloads
    sources:
      - downloads/libressl-*.tar.*
    generates:
      - "{{.PREFIX}}/lib/libcrypto.dylib"
      - "{{.PREFIX}}/lib/libssl.dylib"
      - "{{.PREFIX}}/lib/libtls.dylib"
    cmds:
      - rm -rf "{{.SOURCES_DIR}}/libressl"
      - task: extract
        vars:
          PKG_NAME: libressl
          TARGET_DIR: "{{.SOURCES_DIR}}/libressl"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}
        export PKG_CONFIG_PATH={{.PKG_CONFIG_PATH}}

        export OS={{.OS}}
        export ARCH={{.ARCH}}
        export SOURCES_DIR={{.SOURCES_DIR}}
        export PROJECT_DIR={{.PROJECT_DIR}}
        export PREFIX={{.PREFIX}}
        sh "{{.PROJECT_DIR}}/scripts/libressl/build.sh"

  ffmpeg:
    label: ffmpeg-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    deps:
      - tools
      - downloads
      - task: libressl
        vars:
          SOURCES_DIR: "{{.SOURCES_DIR}}"
          PREFIX: "{{.PREFIX}}"
          PKG_CONFIG_PATH: "{{.PKG_CONFIG_PATH}}"
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          VARIANT: "{{.VARIANT}}"
    sources:
      - downloads/ffmpeg-*.tar.*
    generates:
      - "{{.PREFIX}}/lib/libavcodec.dylib"
    cmds:
      - rm -rf "{{.SOURCES_DIR}}/ffmpeg"
      - task: extract
        vars:
          PKG_NAME: ffmpeg
          TARGET_DIR: "{{.SOURCES_DIR}}/ffmpeg"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}
        export PKG_CONFIG_PATH={{.PKG_CONFIG_PATH}}

        export OS={{.OS}}
        export ARCH={{.ARCH}}
        export VARIANT={{.VARIANT}}
        export SOURCES_DIR={{.SOURCES_DIR}}
        export PROJECT_DIR={{.PROJECT_DIR}}
        export PREFIX={{.PREFIX}}
        sh "{{.PROJECT_DIR}}/scripts/ffmpeg/build.sh"

  uchardet:
    label: uchardet-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    deps:
      - tools
      - downloads
    status:
      - "[ {{.VARIANT}} == audio ] || test -f '{{.PREFIX}}/lib/libuchardet.dylib'"
    cmds:
      - rm -rf "{{.SOURCES_DIR}}/uchardet"
      - task: extract
        vars:
          PKG_NAME: uchardet
          TARGET_DIR: "{{.SOURCES_DIR}}/uchardet/subprojects/uchardet"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}
        export PKG_CONFIG_PATH={{.PKG_CONFIG_PATH}}

        export OS={{.OS}}
        export ARCH={{.ARCH}}
        export SOURCES_DIR={{.SOURCES_DIR}}
        export PROJECT_DIR={{.PROJECT_DIR}}
        export PREFIX={{.PREFIX}}
        sh "{{.PROJECT_DIR}}/scripts/uchardet/build.sh"

  mpv:
    label: mpv-{{.VARIANT}}-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    deps:
      - tools
      - downloads
      - task: libass
        vars:
          SOURCES_DIR: "{{.SOURCES_DIR}}"
          PREFIX: "{{.PREFIX}}"
          PKG_CONFIG_PATH: "{{.PKG_CONFIG_PATH}}"
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          VARIANT: "{{.VARIANT}}"
      - task: ffmpeg
        vars:
          SOURCES_DIR: "{{.SOURCES_DIR}}"
          PREFIX: "{{.PREFIX}}"
          PKG_CONFIG_PATH: "{{.PKG_CONFIG_PATH}}"
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          VARIANT: "{{.VARIANT}}"
      - task: uchardet
        vars:
          SOURCES_DIR: "{{.SOURCES_DIR}}"
          PREFIX: "{{.PREFIX}}"
          PKG_CONFIG_PATH: "{{.PKG_CONFIG_PATH}}"
          OS: "{{.OS}}"
          ARCH: "{{.ARCH}}"
          VARIANT: "{{.VARIANT}}"
    sources:
      - downloads/mpv-*.tar.*
    generates:
      - "{{.PREFIX}}/lib/libmpv.dylib"
    cmds:
      - rm -rf "{{.SOURCES_DIR}}/mpv"
      - task: extract
        vars:
          PKG_NAME: mpv
          TARGET_DIR: "{{.SOURCES_DIR}}/mpv"
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}
        export PKG_CONFIG_PATH={{.PKG_CONFIG_PATH}}

        export OS={{.OS}}
        export ARCH={{.ARCH}}
        export VARIANT={{.VARIANT}}
        export SOURCES_DIR={{.SOURCES_DIR}}
        export PROJECT_DIR={{.PROJECT_DIR}}
        export PREFIX={{.PREFIX}}
        sh "{{.PROJECT_DIR}}/scripts/mpv/build.sh"

  update-downloads-lock:
    run: once
    vars:
      DEPS: pkg-config
        mpv
        uchardet
        libass
        freetype
        harfbuzz
        fribidi
        ffmpeg
        libressl
    cmds:
      - go run cmd/update-downloads-lock/main.go {{.DEPS}} > downloads.lock

  tool-versions:
    run: once
    cmds:
      - go run cmd/tool-versions/main.go

  clean:
    run: once
    cmds:
      - rm -rf build

  clear:
    run: once
    deps:
      - clean
    cmds:
      - rm -rf .task
      - rm -rf downloads/*
