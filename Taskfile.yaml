version: '3'

vars:
  PWD:
    sh: pwd
  TERM:
    sh: echo $TERM
  UNSETENV: |
    # unset all env vars
    for i in $(env | awk -F"=" '{print $1}') ; do unset $i ; done
  PROJECT_DIR: '{{.PWD}}'
  BUILD_DIR: '{{.PROJECT_DIR}}/build'
  TOOLS_DIR: '{{.BUILD_DIR}}/tools'
  TOOLS_CHROOT_DIR: '{{.TOOLS_DIR}}/chroot'
  TOOLS_SOURCES_DIR: '{{.TOOLS_DIR}}/sources'
  PATH: /bin:/usr/bin:{{.TOOLS_CHROOT_DIR}}/bin

tasks:
  default:
    deps:
      - build-darwin

  lock:
    run: once
    vars:
      DEPS:
        pkg-config
        mpv
          libass
            freetype
            harfbuzz
            fribidi
          ffmpeg
    cmds:
      - go run cmd/lock/lock.go {{.DEPS}} > downloads.lock

  build-darwin:
    run: once
    platforms:
      - darwin
    vars:
      OS: darwin
      TARGET_DIR: '{{.BUILD_DIR}}/{{.OS}}'
      ARHC1: amd64
      ARHC2: arm64
      ARHC3: universal
      PACKAGE_ARHC1_DIR: '{{.TARGET_DIR}}/{{.ARHC1}}/package'
      PACKAGE_ARHC2_DIR: '{{.TARGET_DIR}}/{{.ARHC2}}/package'
      PACKAGE_ARHC3_DIR: '{{.TARGET_DIR}}/{{.ARHC3}}/package'
    desc: build {{.ARHC1}} & {{.ARHC2}} packages and merge to {{.ARHC3}}
    deps:
      - build-darwin-amd64
      - build-darwin-arm64
    sources:
      - '{{.PACKAGE_ARHC1_DIR}}/*.dylib'
      - '{{.PACKAGE_ARHC2_DIR}}/*.dylib'
    generates:
      - '{{.PACKAGE_ARHC3_DIR}}/*.dylib'
    cmds:
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}

        mkdir -p "{{.PACKAGE_ARHC3_DIR}}"

        find "{{.PACKAGE_ARHC1_DIR}}" \
          -type f -name '*.dylib' \
          -exec \
          sh -c ' \
            lipo \
              -create \
                "{}" \
                $(echo "{}" | sed -r "s|{{.ARHC1}}|{{.ARHC2}}|g") \
              -output \
                $(echo "{}" | sed -r "s|{{.ARHC1}}|{{.ARHC3}}|g") \
          ' \
        \;

  build-darwin-amd64:
    run: once
    platforms:
      - darwin
    vars:
      OS: darwin
      TARGET_DIR: '{{.BUILD_DIR}}/{{.OS}}'
    deps:
      - task: build
        vars:
          OS: '{{.OS}}'
          ARCH: amd64
          TARGET_DIR: '{{.TARGET_DIR}}'
  
  build-darwin-arm64:
    run: once
    platforms:
      - darwin
    vars:
      OS: darwin
      TARGET_DIR: '{{.BUILD_DIR}}/{{.OS}}'
    deps:
      - task: build
        vars:
          OS: '{{.OS}}'
          ARCH: arm64
          TARGET_DIR: '{{.TARGET_DIR}}'

  build:
    label: build-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    vars:
      PACKAGE_DIR: '{{.TARGET_DIR}}/{{.ARCH}}/package'
      SOURCES_DIR: '{{.TARGET_DIR}}/{{.ARCH}}/sources'
      CHROOT_DIR: '{{.TARGET_DIR}}/{{.ARCH}}/chroot'
      PKG_CONFIG_PATH: '{{.CHROOT_DIR}}/lib/pkgconfig'
    deps:
      - task: package
        vars:
          PACKAGE_DIR: '{{.PACKAGE_DIR}}'
          SOURCES_DIR: '{{.SOURCES_DIR}}'
          CHROOT_DIR: '{{.CHROOT_DIR}}'
          PKG_CONFIG_PATH: '{{.PKG_CONFIG_PATH}}'
          OS: '{{.OS}}'
          ARCH: '{{.ARCH}}'

  downloads:
    internal: true
    run: once
    sources:
      - downloads.lock
    generates:
      - downloads/*
    cmds:
      - |
        set -e

        rm -f downloads/*.tar.*
        go run cmd/download/download.go downloads.lock downloads
  
  extract-pkg:
    internal: true
    run: when_changed
    cmds:
      - |
        set -e

        rm -rf {{.TARGET_DIR}}
        mkdir -p {{.TARGET_DIR}}
        find downloads -type f -name '{{.PKG_NAME}}-*.tar.*' -exec \
          tar \
            -xvf {} \
            --strip-components 1 \
            -C {{.TARGET_DIR}} \
        \;
  
  ninja:
    internal: true
    run: when_changed
    status:
      - test -f {{.TOOLS_CHROOT_DIR}}/bin/ninja
    cmds:
      - |
        set -e

        mkdir -p {{.TOOLS_CHROOT_DIR}}/bin
        ln -s $(which ninja) {{.TOOLS_CHROOT_DIR}}/bin/ninja
  
  meson:
    internal: true
    run: when_changed
    deps:
      - ninja
    status:
      - test -f {{.TOOLS_CHROOT_DIR}}/bin/meson
    cmds:
      - |
        set -e

        mkdir -p {{.TOOLS_CHROOT_DIR}}/bin
        ln -s $(which meson) {{.TOOLS_CHROOT_DIR}}/bin/meson
  
  pkg-config:
    internal: true
    run: when_changed
    deps:
      - downloads
    sources:
      - downloads/pkg-config-*.tar.*
    generates:
      - '{{.TOOLS_CHROOT_DIR}}/bin/pkg-config'
    cmds:
      - task: extract-pkg
        vars:
          PKG_NAME: pkg-config
          TARGET_DIR: '{{.TOOLS_SOURCES_DIR}}/pkg-config'
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}

        cd {{.TOOLS_SOURCES_DIR}}/pkg-config
        ./configure \
          --prefix="{{.TOOLS_CHROOT_DIR}}" \
          --disable-static \
          --enable-fast-instal=true \
          --disable-dependency-tracking \
          --with-pic \
          --with-aix-soname=aix \
          --without-gnu-ld \
          --with-internal-glib \
          --without-gcov
        make -j$(sysctl -n hw.ncpu)
        make install

  tools:
    internal: true
    run: once
    deps:
      - meson
      - pkg-config

  freetype:
    label: freetype-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    deps:
      - tools
      - downloads
    sources:
      - downloads/freetype-*.tar.*
    generates:
      - '{{.CHROOT_DIR}}/lib/libfreetype.dylib'
    cmds:
      - task: extract-pkg
        vars:
          PKG_NAME: freetype
          TARGET_DIR: '{{.SOURCES_DIR}}/freetype'
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}
        export PKG_CONFIG_PATH={{.PKG_CONFIG_PATH}}

        cd {{.SOURCES_DIR}}/freetype
        meson setup build \
          --cross-file {{.PROJECT_DIR}}/cross-files/{{.OS}}-{{.ARCH}}.ini \
          --prefix="{{.CHROOT_DIR}}" \
          -Dbrotli=disabled \
          -Dbzip2=disabled \
          -Dharfbuzz=disabled \
          -Dmmap=disabled \
          -Dpng=disabled \
          -Dtests=disabled \
          -Dzlib=disabled
        meson compile -C build
        meson install -C build

  fribidi:
    label: fribidi-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    deps:
      - tools
      - downloads
    sources:
      - downloads/fribidi-*.tar.*
    generates:
      - '{{.CHROOT_DIR}}/lib/libfribidi.dylib'
    cmds:
      - task: extract-pkg
        vars:
          PKG_NAME: fribidi
          TARGET_DIR: '{{.SOURCES_DIR}}/fribidi'
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}
        export PKG_CONFIG_PATH={{.PKG_CONFIG_PATH}}

        cd {{.SOURCES_DIR}}/fribidi
        meson setup build \
          --cross-file {{.PROJECT_DIR}}/cross-files/{{.OS}}-{{.ARCH}}.ini \
          --prefix="{{.CHROOT_DIR}}" \
          -Ddeprecated=false \
          -Ddocs=false \
          -Dbin=false \
          -Dtests=false \
          -Dfuzzer_ldflags=
        meson compile -C build
        meson install -C build

  harfbuzz:
    label: harfbuzz-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    deps:
      - tools
      - downloads
    sources:
      - downloads/harfbuzz-*.tar.*
    generates:
      - '{{.CHROOT_DIR}}/lib/libharfbuzz.dylib'
    cmds:
      - task: extract-pkg
        vars:
          PKG_NAME: harfbuzz
          TARGET_DIR: '{{.SOURCES_DIR}}/harfbuzz'
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}
        export PKG_CONFIG_PATH={{.PKG_CONFIG_PATH}}

        cd {{.SOURCES_DIR}}/harfbuzz
        meson setup build \
          --cross-file {{.PROJECT_DIR}}/cross-files/{{.OS}}-{{.ARCH}}.ini \
          --prefix="{{.CHROOT_DIR}}" \
          -Dglib=disabled \
          -Dgobject=disabled \
          -Dcairo=disabled \
          -Dchafa=disabled \
          -Dicu=disabled \
          -Dgraphite=disabled \
          -Dgraphite2=disabled \
          -Dfreetype=disabled \
          -Dgdi=disabled \
          -Ddirectwrite=disabled \
          -Dcoretext=disabled \
          -Dtests=disabled \
          -Dintrospection=disabled \
          -Ddocs=disabled \
          -Dbenchmark=disabled \
          -Dicu_builtin=false \
          -Dexperimental_api=false \
          -Dragel_subproject=false \
          -Dfuzzer_ldflags=
        meson compile -C build
        meson install -C build

  libass:
    label: libass-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    deps:
      - tools
      - downloads
      - task: freetype
        vars:
          SOURCES_DIR: '{{.SOURCES_DIR}}'
          CHROOT_DIR: '{{.CHROOT_DIR}}'
          PKG_CONFIG_PATH: '{{.PKG_CONFIG_PATH}}'
          OS: '{{.OS}}'
          ARCH: '{{.ARCH}}'
      - task: fribidi
        vars:
          SOURCES_DIR: '{{.SOURCES_DIR}}'
          CHROOT_DIR: '{{.CHROOT_DIR}}'
          PKG_CONFIG_PATH: '{{.PKG_CONFIG_PATH}}'
          OS: '{{.OS}}'
          ARCH: '{{.ARCH}}'
      - task: harfbuzz
        vars:
          SOURCES_DIR: '{{.SOURCES_DIR}}'
          CHROOT_DIR: '{{.CHROOT_DIR}}'
          PKG_CONFIG_PATH: '{{.PKG_CONFIG_PATH}}'
          OS: '{{.OS}}'
          ARCH: '{{.ARCH}}'
    sources:
      - downloads/libass-*.tar.*
    generates:
      - '{{.CHROOT_DIR}}/lib/libass.dylib'
    cmds:
      - task: extract-pkg
        vars:
          PKG_NAME: libass
          TARGET_DIR: '{{.SOURCES_DIR}}/libass'
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}
        export PKG_CONFIG_PATH={{.PKG_CONFIG_PATH}}

        cd {{.SOURCES_DIR}}/libass

        cp {{.PROJECT_DIR}}/scripts/libass/meson.build ./meson.build
        meson setup build \
          --cross-file {{.PROJECT_DIR}}/cross-files/{{.OS}}-{{.ARCH}}.ini \
          --prefix="{{.CHROOT_DIR}}"

        meson compile -C build libass

        # manual install to preserve symlinks (meson install -C build)
        mkdir -p '{{.CHROOT_DIR}}'
        cp -R build/dist'{{.CHROOT_DIR}}'/* '{{.CHROOT_DIR}}'/

  ffmpeg:
    label: ffmpeg-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    deps:
      - tools
      - downloads
    sources:
      - downloads/ffmpeg-*.tar.*
    generates:
      - '{{.CHROOT_DIR}}/lib/libavcodec.dylib'
    cmds:
      - task: extract-pkg
        vars:
          PKG_NAME: ffmpeg
          TARGET_DIR: '{{.SOURCES_DIR}}/ffmpeg'
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}
        export PKG_CONFIG_PATH={{.PKG_CONFIG_PATH}}

        cd {{.SOURCES_DIR}}/ffmpeg

        cp {{.PROJECT_DIR}}/scripts/ffmpeg/meson.build ./meson.build
        meson setup build \
          --cross-file {{.PROJECT_DIR}}/cross-files/{{.OS}}-{{.ARCH}}.ini \
          --prefix="{{.CHROOT_DIR}}"

        meson compile -C build ffmpeg

        # manual install to preserve symlinks (meson install -C build)
        mkdir -p '{{.CHROOT_DIR}}'
        cp -R build/dist'{{.CHROOT_DIR}}'/* '{{.CHROOT_DIR}}'/

  mpv:
    label: mpv-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    deps:
      - tools
      - downloads
      - task: libass
        vars:
          SOURCES_DIR: '{{.SOURCES_DIR}}'
          CHROOT_DIR: '{{.CHROOT_DIR}}'
          PKG_CONFIG_PATH: '{{.PKG_CONFIG_PATH}}'
          OS: '{{.OS}}'
          ARCH: '{{.ARCH}}'
      - task: ffmpeg
        vars:
          SOURCES_DIR: '{{.SOURCES_DIR}}'
          CHROOT_DIR: '{{.CHROOT_DIR}}'
          PKG_CONFIG_PATH: '{{.PKG_CONFIG_PATH}}'
          OS: '{{.OS}}'
          ARCH: '{{.ARCH}}'
    sources:
      - downloads/mpv-*.tar.*
    generates:
      - '{{.CHROOT_DIR}}/lib/libmpv.dylib'
    cmds:
      - task: extract-pkg
        vars:
          PKG_NAME: mpv
          TARGET_DIR: '{{.SOURCES_DIR}}/mpv'
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}
        export PKG_CONFIG_PATH={{.PKG_CONFIG_PATH}}

        cd {{.SOURCES_DIR}}/mpv
        meson setup build \
          --cross-file {{.PROJECT_DIR}}/cross-files/{{.OS}}-{{.ARCH}}.ini \
          --prefix="{{.CHROOT_DIR}}" \
          `# booleans` \
          -Dgpl=true             `# GPL (version 2 or later) build` \
          -Dcplayer=false        `# mpv CLI player` \
          -Dlibmpv=true          `# libmpv library` \
          -Dbuild-date=true      `# whether to include binary compile time` \
          -Dtests=false          `# unit tests (development only)` \
          -Dta-leak-report=false `# enable ta leak report by default (development only)` \
          \
          `# misc features` \
          -Dcdda=disabled                    `# cdda support (libcdio)` \
          -Dcplugins=auto                    `# C plugins` \
          -Ddvbin=disabled                   `# DVB input module` \
          -Ddvdnav=disabled                  `# dvdnav support` \
          -Diconv=disabled                   `# iconv` \
          -Djavascript=disabled              `# Javascript (MuJS backend)` \
          -Dlcms2=disabled                   `# LCMS2 support` \
          -Dlibarchive=disabled              `# libarchive wrapper for reading zip files and more` \
          -Dlibavdevice=disabled             `# libavdevice` \
          -Dlibbluray=disabled               `# Bluray support` \
          -Dlua=disabled                     `# Lua` \
          -Dpthread-debug=disabled           `# pthread runtime debugging wrappers` \
          -Drubberband=disabled              `# librubberband support` \
          -Dsdl2=disabled                    `# SDL2` \
          -Dsdl2-gamepad=disabled            `# SDL2 gamepad input` \
          -Dstdatomic=disabled               `# C11 stdatomic.h` \
          -Duchardet=disabled                `# uchardet support` \
          -Duwp=disabled                     `# Universal Windows Platform` \
          -Dvapoursynth=disabled             `# VapourSynth filter bridge` \
          -Dvector=disabled                  `# GCC vector instructions` \
          -Dwin32-internal-pthreads=disabled `#internal pthread wrapper for win32 (Vista+)` \
          -Dzimg=disabled                    `# libzimg support (high quality software scaler)` \
          -Dzlib=disabled                    `# zlib` \
          \
          `# audio output features` \
          -Dalsa=disabled       `# ALSA audio output` \
          -Daudiounit=disabled  `# AudioUnit output for iOS` \
          -Dcoreaudio=enabled   `# CoreAudio audio output` \
          -Djack=disabled       `# JACK audio output` \
          -Dopenal=disabled     `# OpenAL audio output` \
          -Dopensles=disabled   `# OpenSL ES audio output` \
          -Doss-audio=disabled  `# OSSv4 audio output` \
          -Dpipewire=disabled   `# PipeWire audio output` \
          -Dpulse=disabled      `# PulseAudio audio output` \
          -Dsdl2-audio=disabled `# SDL2 audio output` \
          -Dsndio=disabled      `# sndio audio output` \
          -Dwasapi=disabled     `# WASAPI audio output` \
          \
          `# video output features` \
          -Dcaca=disabled            `# CACA` \
          -Dcocoa=enabled            `# Cocoa` \
          -Dd3d11=disabled           `# Direct3D 11 video output` \
          -Ddirect3d=disabled        `# Direct3D support` \
          -Ddrm=disabled             `# DRM` \
          -Degl=disabled             `# EGL 1.4` \
          -Degl-android=disabled     `# Android EGL support` \
          -Degl-angle=disabled       `# OpenGL ANGLE headers` \
          -Degl-angle-lib=disabled   `# OpenGL Win32 ANGLE library` \
          -Degl-angle-win32=disabled `# OpenGL Win32 ANGLE Backend` \
          -Degl-drm=disabled         `# OpenGL DRM EGL Backend` \
          -Degl-wayland=disabled     `# OpenGL Wayland Backend` \
          -Degl-x11=disabled         `# OpenGL X11 EGL Backend` \
          -Dgbm=disabled             `# GBM` \
          -Dgl=enabled               `# OpenGL context support` \
          -Dgl-cocoa=enabled         `# gl-cocoa` \
          -Dgl-dxinterop=disabled    `# OpenGL/DirectX Interop Backend` \
          -Dgl-win32=disabled        `# OpenGL Win32 Backend` \
          -Dgl-x11=disabled          `# OpenGL X11/GLX (deprecated/legacy)` \
          -Djpeg=disabled            `# JPEG support` \
          -Dlibplacebo=disabled      `# libplacebo support` \
          -Drpi=disabled             `# Raspberry Pi support` \
          -Dsdl2-video=disabled      `# SDL2 video output` \
          -Dshaderc=disabled         `# libshaderc SPIR-V compiler` \
          -Dsixel=disabled           `# Sixel` \
          -Dspirv-cross=disabled     `# SPIRV-Cross SPIR-V shader converter` \
          -Dplain-gl=enabled         `# OpenGL without platform-specific code (e.g. for libmpv)` \
          -Dvdpau=disabled           `# VDPAU acceleration` \
          -Dvdpau-gl-x11=disabled    `# VDPAU with OpenGl/X11` \
          -Dvaapi=disabled           `# VAAPI acceleration` \
          -Dvaapi-drm=disabled       `# VAAPI (DRM/EGL support)` \
          -Dvaapi-wayland=disabled   `# VAAPI (Wayland support)` \
          -Dvaapi-x11=disabled       `# VAAPI (X11 support)` \
          -Dvaapi-x-egl=disabled     `# VAAPI EGL on X11` \
          -Dvulkan=disabled          `# Vulkan context support` \
          -Dwayland=disabled         `# Wayland` \
          -Dx11=disabled             `# X11` \
          -Dxv=disabled              `# Xv video output` \
          \
          `# hwaccel features` \
          -Dandroid-media-ndk=disabled `# Android Media APIs` \
          -Dcuda-hwaccel=disabled      `# CUDA acceleration` \
          -Dcuda-interop=disabled      `# CUDA with graphics interop` \
          -Dd3d-hwaccel=disabled       `# D3D11VA hwaccel` \
          -Dd3d9-hwaccel=disabled      `# DXVA2 hwaccel` \
          -Dgl-dxinterop-d3d9=disabled `# OpenGL/DirectX Interop Backend DXVA2 interop` \
          -Dios-gl=disabled            `# iOS OpenGL ES hardware decoding interop support` \
          -Drpi-mmal=disabled          `# Raspberry Pi MMAL hwaccel` \
          -Dvideotoolbox-gl=enabled   `# Videotoolbox with OpenG` \
          \
          `# macOS features` \
          -Dmacos-10-11-features=enabled   `# macOS 10.11 SDK Features` \
          -Dmacos-10-12-2-features=enabled `# macOS 10.12.2 SDK Features` \
          -Dmacos-10-14-features=enabled   `# macOS 10.14 SDK Features` \
          -Dmacos-cocoa-cb=disabled        `# macOS libmpv backend` \
          -Dmacos-media-player=disabled    `# macOS Media Player support` \
          -Dmacos-touchbar=disabled        `# macOS Touch Bar support` \
          -Dswift-build=disabled           `# macOS Swift build tools` \
          -Dswift-flags=                   `# Optional Swift compiler flags` \
          \
          `# manpages` \
          -Dhtml-build=disabled    `# html manual generation` \
          -Dmanpage-build=disabled `# manpage generation` \
          -Dpdf-build=disabled     `# pdf manual generation`
        meson compile -C build
        meson install -C build

  package:
    label: package-{{.OS}}-{{.ARCH}}
    internal: true
    run: when_changed
    deps:
      - task: mpv
        vars:
          SOURCES_DIR: '{{.SOURCES_DIR}}'
          CHROOT_DIR: '{{.CHROOT_DIR}}'
          PKG_CONFIG_PATH: '{{.PKG_CONFIG_PATH}}'
          OS: '{{.OS}}'
          ARCH: '{{.ARCH}}'
    sources:
      - '{{.CHROOT_DIR}}/lib/*.dylib'
    generates:
      - '{{.PACKAGE_DIR}}/*.dylib'
    cmds:
      - echo build {{.OS}}/{{.ARCH}}
      - |
        set -e

        {{.UNSETENV}}
        export PATH={{.PATH}}
        export TERM={{.TERM}}
        export PKG_CONFIG_PATH={{.PKG_CONFIG_PATH}}

        rm -rf "{{.PACKAGE_DIR}}"
        mkdir -p "{{.PACKAGE_DIR}}"

        # copy dylibs except '*-subset.*.dylib'
        find "{{.CHROOT_DIR}}/lib" \
          -type f -name '*.dylib' \
          ! -name '*-subset.*.dylib' \
          -exec \
          cp "{}" "{{.PACKAGE_DIR}}" \
        \;

        # libfoo.100.99.88.dylib -> libfoo.100.dylib
        find {{.PACKAGE_DIR}} -type f -name '*.dylib' -exec \
          sh -c 'mv "{}" $(echo "{}" | sed -r "s|([0-9]+)(\.[0-9]+)*|\1|g")' \
        \;

        mv "{{.PACKAGE_DIR}}"/libmpv.*.dylib "{{.PACKAGE_DIR}}/libmpv.dylib"
        install_name_tool -id @rpath/libmpv.dylib "{{.PACKAGE_DIR}}/libmpv.dylib"

        ./scripts/relink_dylibs.sh "{{.CHROOT_DIR}}/lib" "{{.PACKAGE_DIR}}"

        codesign --remove "{{.PACKAGE_DIR}}"/*.dylib

  clean:
    run: once
    cmds:
      - rm -rf build
  
  clear:
    run: once
    deps:
      - clean
    cmds:
      - rm -rf .task
      - rm -rf downloads/*
