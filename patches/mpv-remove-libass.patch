diff --git a/meson.build b/meson.build
index f458b1fa66..854cb5baf7 100644
--- a/meson.build
+++ b/meson.build
@@ -26,12 +26,10 @@ libswscale = dependency('libswscale', version: '>= 5.9.100')
 libplacebo = dependency('libplacebo', version: '>=6.338.2',
                 default_options: ['default_library=static', 'demos=false'])

-libass = dependency('libass', version: '>= 0.12.2')

 # the dependency order of libass -> ffmpeg is necessary due to
 # static linking symbol resolution between fontconfig and MinGW
-dependencies = [libass,
-                libavcodec,
+dependencies = [libavcodec,
                 libavfilter,
                 libavformat,
                 libavutil,
@@ -46,7 +44,7 @@ features = {
     'gpl': get_option('gpl'),
     'jpegxl': libavformat.version().version_compare('>= 59.27.100'),
     'avif-muxer': libavformat.version().version_compare('>= 59.24.100'),
-    'libass': true,
+    'libass': false,
     'threads': true,
     'libplacebo': true,
 }
diff --git a/player/command.c b/player/command.c
index 2f479a5a14..c9b02352a1 100644
--- a/player/command.c
+++ b/player/command.c
@@ -26,7 +26,7 @@
 #include <math.h>
 #include <sys/types.h>

-#include <ass/ass.h>
+// #include <ass/ass.h>
 #include <libavutil/avstring.h>
 #include <libavutil/common.h>

@@ -3455,7 +3455,8 @@ static int mp_property_ffmpeg(void *ctx, struct m_property *prop,
 static int mp_property_libass_version(void *ctx, struct m_property *prop,
                                       int action, void *arg)
 {
-    return m_property_int64_ro(action, arg, ass_library_version());
+    // return m_property_int64_ro(action, arg, ass_library_version());
++    return m_property_int64_ro(action, arg, 0);
 }

 static int mp_property_platform(void *ctx, struct m_property *prop,
diff --git a/sub/ass_mp.c b/sub/ass_mp.c
index 3e9f83313f..01a9b63cfb 100644
--- a/sub/ass_mp.c
+++ b/sub/ass_mp.c
@@ -25,8 +25,8 @@
 #include <assert.h>
 #include <math.h>

-#include <ass/ass.h>
-#include <ass/ass_types.h>
+// #include <ass/ass.h>
+// #include <ass/ass_types.h>

 #include "common/common.h"
 #include "common/global.h"
diff --git a/sub/ass_mp.h b/sub/ass_mp.h
index b4e16d6650..da643b0174 100644
--- a/sub/ass_mp.h
+++ b/sub/ass_mp.h
@@ -23,8 +23,10 @@
 #include <stdint.h>
 #include <stdbool.h>

-#include <ass/ass.h>
-#include <ass/ass_types.h>
+// #include <ass/ass.h>
+// #include <ass/ass_types.h>
+#include "ass.h"
+#include "ass_types.h"

 // These PlayResX and PlayResY values are arbitrary and taken from lavc.
 // lavc assumes these values when converting to ass generally. Moreover, these
diff --git a/sub/osd_libass.c b/sub/osd_libass.c
index 16d94b3cbf..df45a3b6b5 100644
--- a/sub/osd_libass.c
+++ b/sub/osd_libass.c
@@ -47,21 +47,21 @@ void osd_init_backend(struct osd_state *osd)

 static void create_ass_renderer(struct osd_state *osd, struct ass_state *ass)
 {
-    if (ass->render)
-        return;
+    // if (ass->render)
+    //     return;

-    ass->log = mp_log_new(NULL, osd->log, "libass");
-    ass->library = mp_ass_init(osd->global, osd->opts->osd_style, ass->log);
-    ass_add_font(ass->library, "mpv-osd-symbols", (void *)osd_font_pfb,
-                 sizeof(osd_font_pfb) - 1);
+    // ass->log = mp_log_new(NULL, osd->log, "libass");
+    // ass->library = mp_ass_init(osd->global, osd->opts->osd_style, ass->log);
+    // ass_add_font(ass->library, "mpv-osd-symbols", (void *)osd_font_pfb,
+    //              sizeof(osd_font_pfb) - 1);

-    ass->render = ass_renderer_init(ass->library);
-    if (!ass->render)
-        abort();
+    // ass->render = ass_renderer_init(ass->library);
+    // if (!ass->render)
+    //     abort();

-    mp_ass_configure_fonts(ass->render, osd->opts->osd_style,
-                           osd->global, ass->log);
-    ass_set_pixel_aspect(ass->render, 1.0);
+    // mp_ass_configure_fonts(ass->render, osd->opts->osd_style,
+    //                        osd->global, ass->log);
+    // ass_set_pixel_aspect(ass->render, 1.0);
 }

 static void destroy_ass_renderer(struct ass_state *ass)
diff --git a/sub/sd_ass.c b/sub/sd_ass.c
index 6fa4d1bb52..22000fe93d 100644
--- a/sub/sd_ass.c
+++ b/sub/sd_ass.c
@@ -212,42 +212,42 @@ static void enable_output(struct sd *sd, bool enable)

 static void assobjects_init(struct sd *sd)
 {
-    struct sd_ass_priv *ctx = sd->priv;
-    struct mp_subtitle_opts *opts = sd->opts;
+    // struct sd_ass_priv *ctx = sd->priv;
+    // struct mp_subtitle_opts *opts = sd->opts;
     struct mp_subtitle_shared_opts *shared_opts = sd->shared_opts;

-    ctx->ass_library = mp_ass_init(sd->global, sd->opts->sub_style, sd->log);
-    ass_set_extract_fonts(ctx->ass_library, opts->use_embedded_fonts);
+    // ctx->ass_library = mp_ass_init(sd->global, sd->opts->sub_style, sd->log);
+    // ass_set_extract_fonts(ctx->ass_library, opts->use_embedded_fonts);

-    add_subtitle_fonts(sd);
+    // add_subtitle_fonts(sd);

-    if (shared_opts->ass_style_override[sd->order])
-        ass_set_style_overrides(ctx->ass_library, opts->ass_style_override_list);
+    // if (shared_opts->ass_style_override[sd->order])
+    //     ass_set_style_overrides(ctx->ass_library, opts->ass_style_override_list);

-    ctx->ass_track = ass_new_track(ctx->ass_library);
-    ctx->ass_track->track_type = TRACK_TYPE_ASS;
+    // ctx->ass_track = ass_new_track(ctx->ass_library);
+    // ctx->ass_track->track_type = TRACK_TYPE_ASS;

-    ctx->shadow_track = ass_new_track(ctx->ass_library);
-    ctx->shadow_track->PlayResX = MP_ASS_FONT_PLAYRESX;
-    ctx->shadow_track->PlayResY = MP_ASS_FONT_PLAYRESY;
-    mp_ass_add_default_styles(ctx->shadow_track, opts, shared_opts, sd->order);
+    // ctx->shadow_track = ass_new_track(ctx->ass_library);
+    // ctx->shadow_track->PlayResX = MP_ASS_FONT_PLAYRESX;
+    // ctx->shadow_track->PlayResY = MP_ASS_FONT_PLAYRESY;
+    // mp_ass_add_default_styles(ctx->shadow_track, opts, shared_opts, sd->order);

-    char *extradata = sd->codec->extradata;
-    int extradata_size = sd->codec->extradata_size;
-    if (ctx->converter) {
-        extradata = lavc_conv_get_extradata(ctx->converter);
-        extradata_size = extradata ? strlen(extradata) : 0;
-    }
-    if (extradata)
-        ass_process_codec_private(ctx->ass_track, extradata, extradata_size);
+    // char *extradata = sd->codec->extradata;
+    // int extradata_size = sd->codec->extradata_size;
+    // if (ctx->converter) {
+    //     extradata = lavc_conv_get_extradata(ctx->converter);
+    //     extradata_size = extradata ? strlen(extradata) : 0;
+    // }
+    // if (extradata)
+    //     ass_process_codec_private(ctx->ass_track, extradata, extradata_size);

-    mp_ass_add_default_styles(ctx->ass_track, opts, shared_opts, sd->order);
+    // mp_ass_add_default_styles(ctx->ass_track, opts, shared_opts, sd->order);

-#if LIBASS_VERSION >= 0x01302000
-    ass_set_check_readorder(ctx->ass_track, sd->opts->sub_clear_on_seek ? 0 : 1);
-#endif
+// #if LIBASS_VERSION >= 0x01302000
+//     ass_set_check_readorder(ctx->ass_track, sd->opts->sub_clear_on_seek ? 0 : 1);
+// #endif

-    enable_output(sd, true);
+//     enable_output(sd, true);
 }

 static void assobjects_destroy(struct sd *sd)
